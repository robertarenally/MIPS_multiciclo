library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity cntrMIPS is
			port (
					clk 				: in std_logic;
					reset 			: in 	std_logic;
					Op 				: in std_logic_vector(5 downto 0);
					OpALU 			: out std_logic_vector(1 downto 0);
					OrigBALU 		: out std_logic_vector(1 downto 0);
					OrigPC 			: out std_logic_vector(1 downto 0);
					OrigAALU 		: out std_logic_vector(1 downto 0);
					EscreveReg		: out std_logic;
					RegDst 			: out std_logic_vector(1 downto 0);
					MemparaReg		: out std_logic_vector(1 downto 0);
					EscrevePC		: out std_logic;
					EscrevePCCond	: out std_logic;
					IouD				: out std_logic_vector(1 downto 0);
					EscreveMem		: out std_logic;
					EscreveIR		: out std_logic;
					state				: out std_logic_vector(4 downto 0));
end cntrMIPS;

architecture arch_cntrMIPS of cntrMIPS is
	
	type estado is (Fetch,Decode,ExecR,fimR,ExecI,fimI);
	signal EP : estado;		-- estado presente
	signal PE : estado;		-- proximo estado
	signal contador : std_logic_vector(3 downto 0) := "0000";
	
begin

	sincrono : process (clk, Op, botao) begin
		if (reset = '0') then  --força a começar o controle a comecar do estado ST0;
			EP <= Fetch;
		elsif (rising_edge(clk)) then
			EP <= PE;
		end if;
	end process sincrono;
	
	combinacional : process(EP, Op) begin
		case EP is
			when Fetch =>			-- Busca: da Instrucao
				OpALU 			<= "00";
				OrigBALU 		<= "01";
				OrigPC 			<= "00";
				OrigAALU 		<= "11"; 
				EscreveReg 		<= "11";
				RegDst 			<= "11"; 
				MemparaReg 		<= "11";
				EscrevePC 		<= "11"; 
				EscrevePCCond 	<= "11";
				IouD 				<= "00"; 
				EscreveMem 		<= '0';
				EscreveIR 		<= '0';
				PE 				<=	Fetch;
			when others =>
				PE 				<= Fetch;
		end case;
	end process combinacional;
end arch_cntrMIPS;